/*
 * Copyright 2016 Yufei Li
 *
 * Bison/Yacc File
 */

%{
#include <iostream>
#include <string>

int yylex();

int yyerror(const char *err_msg) {
    std::cout << err_msg << std::endl;
}
%}

/*
 * Token Definition
 */

%union {
    int ival;
    char * sval;
};

%token STRING_CONSTANT INTEGER_CONSTANT NIL
%token ADD SUB MUL DIV OR AND EQ NEQ LT GT LT_EQ GT_EQ DOT ASSIGN
%token IF THEN ELSE WHILE DO FOR TO BREAK
%token FUNCTION LET VAR TYPE IN END ARRAY OF ID
%token COMMA COLON SEMICOLON
%token LPAREN RPAREN LBRACK RBRACK LBRACE RBRACE
%token INT STRING

%start program

/*
 * Tiger Syntax Grammar Debug
 *
 * Test Grammar
 */
%%

program
    : /* Empty */
    | expr
    ;

expr
    : INTEGER_CONSTANT
    | STRING_CONSTANT
    | NIL
    | lvalue
    | SUB INTEGER_CONSTANT
    | expr binary_operator expr
    | lvalue ASSIGN expr
    | id LPAREN expr_list_opt RPAREN
    | LPAREN expr_seq_opt RPAREN
    | type_id LBRACE field_list_opt RBRACE
    | type_id LBRACK expr RBRACK OF expr
    | IF expr THEN expr
    | IF expr THEN expr ELSE expr
    | WHILE expr DO expr
    | FOR id ASSIGN expr TO expr DO expr
    | BREAK
    | LET declaration_list IN expr_seq_opt END
    ;

lvalue
    : id
    | lvalue DOT id
    | lvalue LBRACK expr RBRACK
    ;

id  : ID ;

type_id
    : STRING
    | INT
    | id
    ;

binary_operator
    : ADD
    | SUB
    | MUL
    | DIV
    | EQ
    | NEQ
    | AND
    | OR
    | GT
    | LT
    | GT_EQ
    | LT_EQ
    ;

expr_list_opt
    : /* Empty */
    | expr_list
    ;

expr_list
    : expr
    | expr_list COMMA expr
    ;

expr_seq_opt
    : /* Empty */
    | expr_seq
    ;

expr_seq
    : expr
    | expr_seq SEMICOLON expr
    ;

field_list_opt
    : /* Empty */
    | field_list
    ;

field_list
    : id EQ expr
    | field_list COMMA id EQ expr
    ;

declaration_list
    : declaration
    | declaration_list declaration
    ;

declaration
    : type_declaration
    | variable_declaration
    ;

type_declaration
    : TYPE type_id EQ type
    ;

type
    : type_id
    | LBRACE type_fields_opt RBRACE
    | ARRAY OF type_id
    ;

type_fields_opt
    : /* Empty */
    | type_fields
    ;

type_fields
    : type_field
    | type_fields COMMA type_field
    ;

type_field
    : id COLON type_id
    ;

variable_declaration
    : VAR id ASSIGN expr
    | VAR id COLON type_id ASSIGN expr
    ;

%%

/*
 * Driver function.
 */

int main(void) {
    yyparse();
    return 0;
}
