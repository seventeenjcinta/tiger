%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  ADD SUB MUL DIV EQ NEQ LT LT_EQ GT GT_EQ
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE

%nonassoc THEN DO TYPE FUNCTION ID
%nonassoc ASSIGN LBRACK ELSE OF COMMA
%left OR
%left AND
%nonassoc EQ NEQ LT_EQ LT GT GT_EQ
%left ADD SUB
%left MUL DIV
%left USUB

%start program

%%

program : main { absyn_root = $1; };

main
    : /* Empty */ { $$ = NULL; }
    | expr  { $$ = $1; }
    ;

expr
    : INT   { $$ = A_IntExp(EM_tokPos, $1); }
    | STRING    { $$ = A_StringExp(EM_tokPos, $1); }
    | NIL   { $$ = A_NilExp(EM_tokPos); }
    | lvalue    { $$ =  }
    | SUB expr %prec USUB   { $$ =  }
    | expr ADD expr
    | expr SUB expr
    | expr MUL expr
    | expr DIV expr
    | expr EQ expr
    | expr NEQ expr
    | expr LT expr
    | expr LT_EQ expr
    | expr GT expr
    | expr GT_EQ expr
    | expr AND expr
    | expr OR expr
    | lvalue ASSIGN expr
    | id LPAREN expr_list_opt RPAREN
    | LPAREN expr_seq_opt RPAREN
    | id LBRACE field_list_opt RBRACE
    | array OF expr
    | IF expr THEN expr
    | IF expr THEN expr ELSE expr
    | WHILE expr DO expr
    | FOR id ASSIGN expr TO expr DO expr
    | BREAK
    | LET declaration_list IN expr_seq_opt END
    ;

lvalue
    : id
    | lvalue DOT id
    | array
    ;

array
    : lvalue LBRACK expr RBRACK
    ;

id  : ID ;

type_id
    : STRING
    | INT
    | ID
    ;

expr_list_opt
    : /* Empty */
    | expr_list
    ;

expr_list
    : expr
    | expr_list COMMA expr
    ;

expr_seq_opt
    : /* Empty */
    | expr_seq
    ;

expr_seq
    : expr
    | expr_seq SEMICOLON expr
    ;

field_list_opt
    : /* Empty */
    | field_list
    ;

field_list
    : id EQ expr
    | field_list COMMA id EQ expr
    ;

declaration_list
    : declaration
    | declaration_list declaration
    ;

declaration
    : type_declaration
    | variable_declaration
    | function_declaration
    ;

type_declaration
    : TYPE id EQ type
    ;

type
    : id
    | LBRACE type_fields_opt RBRACE
    | ARRAY OF id
    ;

type_fields_opt
    : /* Empty */
    | type_fields
    ;

type_fields
    : type_field
    | type_fields COMMA type_field
    ;

type_field
    : id COLON id
    ;

variable_declaration
    : VAR id ASSIGN expr
    | VAR id COLON id ASSIGN expr
    ;

function_declaration
    : FUNCTION id LPAREN type_fields_opt RPAREN EQ expr
    | FUNCTION id LPAREN type_fields_opt RPAREN COLON type_id EQ expr
    ;
