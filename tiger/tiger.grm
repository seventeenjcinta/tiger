%{
#include <stdio.h>
#include "util.h"
#include "absyn.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
  S_symbol symbol;
  A_var var;
	A_exp exp;
  A_dec dec;
  A_ty ty;
  A_field field;
  A_fieldList fieldList;
  A_expList expList;
  A_fundec fundec;
  A_fundecList fundecList;
  A_decList decList;
  A_namety namety;
  A_nametyList nametyList;
  A_efield efield;
  A_efieldList efieldList;
	}

%token <sval> ID STRING
%token <ival> INT

%token
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
  LBRACE RBRACE DOT
  ADD SUB MUL DIV EQ NEQ LT LT_EQ GT GT_EQ
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
  BREAK NIL
  FUNCTION VAR TYPE

%type <exp> program main expr
%type <var> lvalue
%type <symbol> id
%type <expList> expr_list expr_list_opt expr_seq expr_seq_opt
%type <field> type_field
%type <fieldList> type_fields type_fields_opt
%type <decList> declaration_list
%type <dec> declaration function_declaration type_declaration variable_declaration
%type <ty> type
%type <efieldList> field_list field_list_opt

%nonassoc LOW // 消除左值的歧义
%nonassoc THEN DO TYPE FUNCTION ID
%nonassoc ASSIGN LBRACK ELSE OF COMMA
%left OR
%left AND
%nonassoc EQ NEQ LT_EQ LT GT GT_EQ
%left ADD SUB
%left MUL DIV
%left USUB

%start program

%%

program : main { absyn_root = $1; };

main
    : /* Empty */ { $$ = NULL; }
    | expr  { $$ = $1; }
    ;

expr
    : INT   { $$ = A_IntExp(EM_tokPos, $1); }
    | STRING    { $$ = A_StringExp(EM_tokPos, $1); }
    | NIL   { $$ = A_NilExp(EM_tokPos); }
    | lvalue    { $$ = A_VarExp(EM_tokPos, $1); }
    | SUB expr %prec USUB       { $$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2); }
    | expr ADD expr     { $$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3); }
    | expr SUB expr     { $$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3); }
    | expr MUL expr     { $$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3); }
    | expr DIV expr     { $$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3); }
    | expr EQ expr      { $$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3); }
    | expr NEQ expr     { $$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3); }
    | expr LT expr      { $$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3); }
    | expr LT_EQ expr   { $$ = A_OpExp(EM_tokPos, A_leOp, $1, $3); }
    | expr GT expr      { $$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3); }
    | expr GT_EQ expr   { $$ = A_OpExp(EM_tokPos, A_geOp, $1, $3); }
    | expr AND expr     { $$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0)); }
    | expr OR expr      { $$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos, 1), $3); }
    | lvalue ASSIGN expr    { $$ = A_AssignExp(EM_tokPos, $1, $3); }
    | id LPAREN expr_list_opt RPAREN    { $$ = A_CallExp(EM_tokPos, $1, $3); }
    | LPAREN expr_seq_opt RPAREN    { $$ = A_SeqExp(EM_tokPos, $2); }
    | id LBRACE field_list_opt RBRACE   { $$ = A_RecordExp(EM_tokPos, $1, $3); }
    | id LBRACK expr RBRACK OF expr     { $$ = A_ArrayExp(EM_tokPos, $1, $3, $6); }
    | IF expr THEN expr { $$ = A_IfExp(EM_tokPos, $2, $4, NULL); }
    | IF expr THEN expr ELSE expr { $$ = A_IfExp(EM_tokPos, $2, $4, $6); }
    | WHILE expr DO expr { $$ = A_WhileExp(EM_tokPos, $2, $4); }
    | FOR id ASSIGN expr TO expr DO expr { $$ = A_ForExp(EM_tokPos, $2, $4, $6, $8); }
    | BREAK { $$ = A_BreakExp(EM_tokPos); }
    | LET declaration_list IN expr_seq_opt END { $$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4)); }
    ;

lvalue
    : id %prec LOW { $$ = A_SimpleVar(EM_tokPos, $1); }
    | lvalue DOT id { $$ = A_FieldVar(EM_tokPos, $1, $3); }
    | id LBRACK expr RBRACK { $$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, $1), $3); }
    | lvalue LBRACK expr RBRACK { $$ = A_SubscriptVar(EM_tokPos, $1, $3); }
    ;

id  : ID  { $$ = S_Symbol($1); }

expr_list_opt
    : /* Empty */ { $$ = NULL; }
    | expr_list { $$ = $1; }
    ;

expr_list
    : expr { $$ = A_ExpList($1, NULL); }
    | expr_list COMMA expr { $$ = A_ExpList($3, $1); }
    ;

expr_seq_opt
    : /* Empty */ { $$ = NULL; }
    | expr_seq { $$ = $1; }
    ;

expr_seq
    : expr { $$ = A_ExpList($1, NULL); }
    | expr_seq SEMICOLON expr { $$ = A_ExpList($3, $1); }
    ;

field_list_opt
    : /* Empty */ { $$ = NULL; }
    | field_list { $$ = $1; }
    ;

field_list
    : id EQ expr { $$ = A_EfieldList(A_Efield($1, $3), NULL); }
    | field_list COMMA id EQ expr { $$ = A_EfieldList(A_Efield($3, $5), $1); }
    ;

declaration_list
    : /* Empty */ { $$ = NULL; }
    | declaration_list declaration { $$ = A_DecList($2, $1); }
    ;

declaration
    : type_declaration { $$ = $1; }
    | variable_declaration { $$ = $1; }
    | function_declaration { $$ = $1; }
    ;

type_declaration
    : TYPE id EQ type { $$ = A_TypeDec(EM_tokPos, A_NametyList(A_Namety($2, $4), NULL)); }
    ;

type
    : id { $$ = A_NameTy(EM_tokPos, $1); }
    | LBRACE type_fields_opt RBRACE { $$ = A_RecordTy(EM_tokPos, $2); }
    | ARRAY OF id { $$ = A_ArrayTy(EM_tokPos, $3); }
    ;

type_fields_opt
    : /* Empty */ { $$ = NULL; }
    | type_fields { $$ = $1; }
    ;

type_fields
    : type_field { $$ = A_FieldList($1, NULL); }
    | type_fields COMMA type_field { $$ = A_FieldList($3, $1); }
    ;

type_field
    : id COLON id { $$ = A_Field(EM_tokPos, $1, $3); }
    ;

variable_declaration
    : VAR id ASSIGN expr { $$ = A_VarDec(EM_tokPos, $2, NULL, $4); }
    | VAR id COLON id ASSIGN expr { $$ = A_VarDec(EM_tokPos, $2, $4, $6); }
    ;

function_declaration
    : FUNCTION id LPAREN type_fields_opt RPAREN EQ expr { $$ = A_FunctionDec(EM_tokPos, A_FundecList(A_Fundec(EM_tokPos, $2, $4, NULL, $7), NULL)); }
    | FUNCTION id LPAREN type_fields_opt RPAREN COLON id EQ expr { $$ = A_FunctionDec(EM_tokPos, A_FundecList(A_Fundec(EM_tokPos, $2, $4, $7, $9), NULL)); }
    ;
